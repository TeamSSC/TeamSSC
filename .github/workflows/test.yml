name: Build, Docker Push, and Deploy

on:
  push:
    branches: [ main, feat/* ]
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE_TAG_NAME: team-ssc

jobs:
  build-and-docker-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17 with AdoptOpenJDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

      - name: Create Firebase service account JSON file
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "firebase-service-account.json"
          json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          dir: 'src/main/resources/'

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # EC2 인스턴스에 docker-compose.yml 파일이 복사될 경로 정의
            REMOTE_PATH=/home/${{ secrets.EC2_USER }}/app

            # 경로가 존재하지 않으면 디렉터리를 생성
            mkdir -p $REMOTE_PATH

            # 프로젝트의 최상단에 있는 docker-compose.yml 파일을 EC2 인스턴스로 복사
            scp -o StrictHostKeyChecking=no ./docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:$REMOTE_PATH/docker-compose.yml
            
            # EC2 인스턴스에서 docker-compose.yml 파일이 위치한 디렉터리로 이동
            cd $REMOTE_PATH
            
            # 실행 중인 기존 컨테이너를 중지하고 제거
            sudo docker-compose down
            
            # 최신 Docker 이미지를 가져옴
            sudo docker-compose pull
            
            # 컨테이너를 다시 시작
            sudo docker-compose up -d