name: Build, Docker Push, and Deploy

on:
  push:
    branches: [ main, feat/* ]
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE_TAG_NAME: team-ssc

jobs:
  build-and-docker-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17 with AdoptOpenJDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

      - name: Create Firebase service account JSON file
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "firebase-service-account.json"
          json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          dir: 'src/main/resources/'

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "status=running" --filter "publish=8080")

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
                -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
                -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -e DB_URL=${{ secrets.DB_URL }} \
                -e ADMIN_SECRET_KEY=${{ secrets.ADMIN_SECRET_KEY }} \
                -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
                -e EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }} \
                -e EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
                -e S3_ACCESS=${{ secrets.S3_ACCESS }} \
                -e S3_SECRET=${{ secrets.S3_SECRET }} \
                -e S3_REGION=${{ secrets.S3_REGION }} \
                -e S3_BUCKETNAME=${{ secrets.S3_BUCKETNAME }} \
                -e SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }} \
                -e RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }} \
                -e RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }} \
                -e RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }} \
                -e RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }} \
                ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
